#!/usr/bin/perl

#$Id: export_sponsors_repositories_old 3135 2010-09-23 23:23:37Z dima $

use lib '/home/dima/gcc_svn/lib';
use lib '/home/pim/lib';

use strict;

use atomcfg;
use atomsql;
use atomlog;
use atom_misc;
use atom_util;
use data_management;
use icecat_server2_repository;
use process_manager;
use icecat_server2;

use POSIX qw (strftime);
use Data::Dumper;

$| = 1;

if (&get_running_perl_processes_number('export_sponsors_repositories') != 1)  {
	print "already running. exit!";
	exit;
}

print "Start... ";

# get today's initial date
my $today = &format_date(time);
$today =~ s/.{6}$/000000/;

#my %icontent;

print $today."\n";

# variables
my $ln = '/bin/ln -s -f';

my $path = {
	'level4'      => $atomcfg{'xml_path'}.'level4/',
	'level4_int'  => $atomcfg{'xml_path'}.'level4/INT/',
	'freexml_int' => $atomcfg{'xml_path'}.'freexml.int/',
	'vendor_int'  => $atomcfg{'xml_path'}.'vendor.int/'
};

my $realm = 'Open ICEcat XML repository';


my $mapping = 'product_mapping.xml';

# get has of langs + INT
my $langs = &do_query("select langid, short_code from language where published='Y' order by langid");
my %lang_hash = map {$_->[0] => $_->[1]} @$langs;
$lang_hash{0} = 'INT';

my ($swap, $cmd, $restrict);

 #############################
## All right, let's move now ##
 #############################

# load sponsors
my $sponsors = &get_rows('supplier',"(is_sponsor='Y' and user_id!=0) or (public_login != '' and public_login is not null)");
if (!$sponsors->[0]) {
	print "It's a pity we have no sponsors! :(\n";
	exit;
}
else {
	print "\nWe have several sponsors, ";
}

# add folder_name to sponsors
foreach my $sponsor (@$sponsors) {
	if (($sponsor->{'is_sponsor'} eq 'Y') && ($sponsor->{'user_id'} ne '0')) {
		$sponsor->{'in_freexml'} = 1;
	}
	else {
		$sponsor->{'in_freexml'} = 0;
	}
}

# make dirs
&makedir($path->{'vendor_int'});
&makedir($path->{'freexml_int'});

# make categories.xml & measures.xml.gz for /freexml.int/
&symlink($atomcfg{'xml_path'},$path->{'freexml_int'},'categories.xml');
&symlink($atomcfg{'xml_path'},$path->{'freexml_int'},'measures.xml.gz');

# creating symlinks for /level4/refs.xml to /freexml.int/refs.xml & refs/
&symlink($path->{'level4'},$path->{'freexml_int'},'refs.xml');
&symlink($path->{'level4'},$path->{'freexml_int'},'refs');

my $freexml_index;

print "create repositories for vendors:\n";

&product_mapping_header_footer;
&supplier_mapping_header_footer;

foreach (@$sponsors) {
	&create_repository($_);
}

print "\n";

# store freexml indexes
print "store freexmls:\t";

&store_product_mapping($path->{'freexml_int'});
&store_supplier_mapping($path->{'freexml_int'});

&product_mapping_header_footer_end;
&supplier_mapping_header_footer_end;

foreach my $langid (sort {$a <=> $b} keys %lang_hash) {
	print "\n\t\033[1m".$lang_hash{$langid}."\033[0m ";

	&makedir($path->{'freexml_int'}.$lang_hash{$langid});

	$restrict = [];
	if ($lang_hash{$langid} =~ /^[GD]E$/i) { 
		# Martijn's wishes (Philips: 25.02.2009, Pelikan: ..., Sony: 17.08.2010)
		push @$restrict, {'supplier_id' => &do_query("select supplier_id from supplier where name='Philips'")->[0][0]};
		push @$restrict, {'supplier_id' => &do_query("select supplier_id from supplier where name='Sony'")->[0][0]};
		push @$restrict, {'supplier_id' => &do_query("select supplier_id from supplier where name='Pelikan'")->[0][0],
											'prod_id_set' => '4101518,4101525,4101532,4101549,4101556,4101563,4101570,4101587,4101594,4101600,4101617,4101624,4101945,4101952,4101969,4101976,4101983,4101990,4102003,4102010,4102027,4102034,4102041,4102058,4102065,4102072,4102089,4102096,4102102,4102119,4102126,4102133,4102218,4102225,4102232,4102249,4102256,4102263,4102270,4102287,4102294,4102300,4102317,4102324,4102331,4102348,4102355,4102362,4102379,4102386,4102393,4102409,4105530,4105547,4176264,4176271,4176288,4176295,4176301,4176318,4176325,4176332,4176349,4176356,4176363,4176370,4176608,4176615,4176622,4176639,4176646,4176653,4176660,4176677,4177605,4177612,5610420,5610421,5610422,5610423,5610424,5610425,5610426,5610427,5610428,5610429,5610430,5610431,5610432,5610433,5610434,5610435,86044092,86044115,86044139,86044153,86044177,86044191,86044214,86044238,86044252,86044276'};
	}

	&store_index($path->{'freexml_int'}.$lang_hash{$langid}."/",$freexml_index,$restrict);

	&symlink($path->{'freexml_int'},$path->{'freexml_int'}.$lang_hash{$langid}."/",'product_mapping.xml');
	&symlink($path->{'freexml_int'},$path->{'freexml_int'}.$lang_hash{$langid}."/",'supplier_mapping.xml');
}

print "\n\n";

# remove old vendors
print "vendors removing...  ";

opendir(DIR, $path->{'vendor'});

my $matched;

my @all_repos = grep { !/^\./ && -d $path->{'vendor'}.$_ } readdir(DIR);

foreach my $ext_name (@all_repos) {
	# set off
	$matched = 0;
	# find & check
	foreach my $isponsor (@$sponsors) {
		if (lc($ext_name) eq lc($isponsor->{'folder_name'})) {
			$matched = 1;
			last;
		}
	}
	# remove dirs
	unless ($matched) {
		print &swap;
		$cmd = "/bin/rm -rf ".$path->{'vendor_int'}.$ext_name;
		`$cmd`;
	}
}

closedir(DIR);

foreach my $hndl (values %$freexml_index) {
  $cmd = '/bin/rm -f '.$hndl->{'draftfilename'};
  `$cmd`;
}

print "done.\n\n";

################## stop ####################

sub create_repository {
 	my ($vendor) = @_;

	my $table_name = 'itmp_product4free_repo';

	print "\033[1;31m" . $vendor->{'name'} . (" " x (20-length($vendor->{'name'}))) . "\033[0;37m";

	my ($content, $xml);

	#  make vendorpath name
	my $vendor_int_path = $path->{'vendor_int'}.$vendor->{'folder_name'}.'/';

	# make dirs
	&makedir($vendor_int_path);
	foreach my $langid (sort {$a <=> $b} keys %lang_hash) {
		&makedir($vendor_int_path.$lang_hash{$langid});
	}
	
	&symlink($atomcfg{'xml_export_path'},$vendor_int_path,'categories.xml');
	&symlink($atomcfg{'xml_export_path'},$vendor_int_path,'categories.xml.gz');
	&symlink($atomcfg{'xml_export_path'},$vendor_int_path,'measures.xml');
	&symlink($atomcfg{'xml_export_path'},$vendor_int_path,'measures.xml.gz');

	## creating symlinks for /level4.int/refs.xml to /vendor.int/*/refs.xml & refs/
	foreach my $langid (sort {$a <=> $b} keys %lang_hash) {
		&symlink($path->{'level4'},$vendor_int_path.$lang_hash{$langid}."/",'refs.xml');
		&symlink($path->{'level4'},$vendor_int_path.$lang_hash{$langid}."/",'refs');
	}

	# get tmp_product
	$table_name = &get_products4repository({'supplier_name' => $vendor->{'name'}, 'table_name' => $table_name}, 'progress');

	# create index for /vendor.int/
	$content = &create_index_files(1, {'on_market' => 1, 'table_name' => $table_name}, 'progress');

	if ($vendor->{'in_freexml'}) { # complete freexml index files also!!!!!!!!!!
		foreach my $t (keys %$content) {
			next if ($t =~ /onlyvendor/i);
			unless ($freexml_index->{$t}->{'draftfilename'}) {
				$freexml_index->{$t}->{'draftfilename'} = '/tmp/'.$$.'_freexml_'.$content->{$t}->{'filename'};
				$freexml_index->{$t}->{'filename'} = $content->{$t}->{'filename'};
				$cmd = '/bin/rm -f '.$freexml_index->{$t}->{'draftfilename'}.' ; /bin/cat '.$content->{$t}->{'draftfilename'}.' > '.$freexml_index->{$t}->{'draftfilename'}; # to prevent old data copying
			}
			else {
				$cmd = '/bin/cat '.$content->{$t}->{'draftfilename'}.' >> '.$freexml_index->{$t}->{'draftfilename'};
			}
			&log_printf($cmd." ".$t);
			`$cmd`;
		}
	}

	my $tt;

	if ($content->{'only_vendor'}) { # add only_vendor data to general also!!!!!!!!!
		foreach my $t (keys %$content) {
			if ($t =~ /onlyvendor/i) {
				$tt = $t;
				$tt =~ s/onlyvendor$//i;
				$cmd = '/bin/cat '.$content->{$t}->{'draftfilename'}.' >> '.$content->{$tt}->{'draftfilename'};
				&log_printf($cmd." ".$t." -> ".$tt);
				`$cmd`;
			}
		}
	}

	if ($vendor->{'in_freexml'}) {
		# product_mapping
		&create_prodid_mapping('add', {'table_name' => $table_name});
	
		# make supplier_mapping (of prijslijst.txt)
		&create_supplier_mapping('add', {'table_name' => $table_name});
	}

 	foreach my $langid (sort {$a <=> $b} keys %lang_hash) {
		print "\n\t\033[1m".$lang_hash{$langid}."\033[0m ";
		&store_index($vendor_int_path.$lang_hash{$langid}."/",$content);
		
		if ($vendor->{'in_freexml'}) {
			&symlink($path->{'freexml_int'},$vendor_int_path.$lang_hash{$langid}."/",'product_mapping.xml','ignore');
			&symlink($path->{'freexml_int'},$vendor_int_path.$lang_hash{$langid}."/",'supplier_mapping.xml','ignore');
		}
	}

	foreach my $hndl (values %$content) {
		$cmd = '/bin/rm -f '.$hndl->{'draftfilename'};
		`$cmd`;
	}

	print "\n";
}

sub format_date {
	return strftime("%Y%m%d%H%M%S", localtime(shift));
}

sub swap {
	$swap = ($swap eq '/')?'\\':'/';
	return "\b".$swap;
}
